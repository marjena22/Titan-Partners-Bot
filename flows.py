from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters,
)

from router import pick_manager # routing to a manager


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ STEP MAP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LANG, TOPIC, MODEL, TRAFFIC, MARKET, DEAL, ASKING, PR_EXTRA, PAY_EXTRA = range(9)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TEXTS and CONSTANTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LANG_BUTTONS = [
    ("EN", "English üá¨üáß"),
    ("UA", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"),
    ("RU", "–†—É—Å—Å–∫–∏–π üá∑üá∫"),
    ("PT", "Portugu√™s üáßüá∑"),
    ("ES", "Espa√±ol üá™üá∏"),
]

GREETING = {
    "EN": "Splendid! I'm here to make our conversation as comfortable "
          "and enjoyable as possible! üòä\nWhat can I do for you?",
    "UA": "–ß—É–¥–æ–≤–æ! –Ø —Ç—É—Ç, —â–æ–± –Ω–∞—à–∞ —Ä–æ–∑–º–æ–≤–∞ –±—É–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—é "
          "—Ç–∞ –ø—Ä–∏—î–º–Ω–æ—é! üòä\n–ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
    "RU": "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º "
          "–∏ –ø—Ä–∏—è—Ç–Ω—ã–º! üòä\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "PT": "Perfeito! Estou aqui para tornar nossa conversa o mais confort√°vel "
          "e agrad√°vel poss√≠vel! üòä\nComo posso ajudar?",
    "ES": "¬°Estupendo! Estoy aqu√≠ para que nuestra conversaci√≥n sea lo m√°s "
          "c√≥moda y agradable posible! üòä\n¬øEn qu√© puedo ayudarte?",
}

TOPIC_BUTTONS = {
    "EN": [
        ("streamer",  "Verify my account (streamer)"),
        ("webmaster", "Verify my account (webmaster)"),
        ("pr",        "Connect me with PR/Marketing"),
        ("payment",   "I'd like to offer payment solutions"),
        ("vacancies", "Vacancies"),
        ("other",     "Other"),
    ],
    "UA": [
        ("streamer",  "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç (—Å—Ç—Ä–∏–º–µ—Ä)"),
        ("webmaster", "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç (–≤–µ–±–º–∞–π—Å—Ç–µ—Ä)"),
        ("pr",        "–ó º—î–¥–Ω–∞—Ç–∏ –∑ PR/–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º"),
        ("payment",   "–ü—Ä–æ–ø–æ–Ω—É—é –ø–ª–∞—Ç—ñ–∂–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è"),
        ("vacancies", "–í–∞–∫–∞–Ω—Å—ñ—ó"), 
        ("other",     "–Ü–Ω—à–µ"),
    ],
    "RU": [
        ("streamer",  "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (—Å—Ç—Ä–∏–º–µ—Ä)"),
        ("webmaster", "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–≤–µ–±–º–∞—Å—Ç–µ—Ä)"),
        ("pr",        "–°–≤—è–∑–∞—Ç—å —Å PR/–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º"),
        ("payment",   "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"),
        ("vacancies", "–í–∞–∫–∞–Ω—Å–∏–∏"),
        ("other",     "–î—Ä—É–≥–æ–µ"),
    ],
    "PT": [
        ("streamer",  "Verificar minha conta (streamer)"),
        ("webmaster", "Verificar minha conta (webmaster)"),
        ("pr",        "Falar com PR/Marketing"),
        ("payment",   "Oferecer solu√ß√µes de pagamento"),
        ("vacancies", "Vagas"),
        ("other",     "Outro"),
    ],
    "ES": [
        ("streamer",  "Verificar mi cuenta (streamer)"),
        ("webmaster", "Verificar mi cuenta (webmaster)"),
        ("pr",        "Conectar con PR/Marketing"),
        ("payment",   "Ofrecer soluciones de pago"),
        ("vacancies", "Vacantes"),
        ("other",     "Otro"),
    ],
}

PAYMENT_Q = {
    "EN": "What is your preferred payment model?",
    "UA": "–Ø–∫–∞ –º–æ–¥–µ–ª—å –æ–ø–ª–∞—Ç–∏ –¥–ª—è –≤–∞—Å –±–∞–∂–∞–Ω–∞?",
    "RU": "–ö–∞–∫—É—é –º–æ–¥–µ–ª—å –æ–ø–ª–∞—Ç—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
    "PT": "Qual √© o modelo de pagamento preferido?",
    "ES": "¬øCu√°l es tu modelo de pago preferido?",
}

PAYMENT_BTNS = [
    ("rs",  "RS / Hybrid / CPA"),
    ("cpm", "CPM"),
]

PAY_LABEL = {"rs": "RS / Hybrid / CPA", "cpm": "CPM"} # dictionary for the manager message 

TRAFFIC_Q = {
    "EN": "What are your traffic sources? Select all that apply and press ¬´Done¬ª.",
    "UA": "–Ø–∫—ñ —É –≤–∞—Å –¥–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É? –í–∏–±–µ—Ä—ñ—Ç—å —É—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´Done¬ª.",
    "RU": "–û—Ç–∫—É–¥–∞ –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫? –û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´Done¬ª.",
    "PT": "Quais s√£o suas fontes de tr√°fego? Marque todas as que se aplicam e toque em ¬´Done¬ª.",
    "ES": "¬øCu√°les son tus fuentes de tr√°fico? Selecciona todas las que correspondan y pulsa ¬´Done¬ª.",
}

TRAFFIC_BTNS = [
    ("fb",        "FB"),
    ("google",    "Google"),
    ("inapp",     "In-app"),
    ("push",      "Push"),
    ("tiktok",    "Tiktok"),
    ("uac",       "UAC"),
    ("telegram",  "Telegram"),
    ("influence", "Influence"),
    ("scheme",    "Scheme"),
    ("other",     "Other"),
]

TRAFFIC_DONE = ("traffic_done", "‚úÖ Done")

MARKET_Q = {
    "EN": "Please share the main markets you work with.",
    "UA": "–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ —Ä–∏–Ω–∫–∏, –∑ —è–∫–∏–º–∏ –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ.",
    "RU": "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.",
    "PT": "Por favor, indique os principais mercados com que trabalha.",
    "ES": "Indica los principales mercados con los que trabajas.",
}

MARKET_BTNS = {
    "EN": [
        ("eu",    "Europe"),
        ("ca",    "Canada / Oceania"),
        ("latam", "Latin America"),
        ("other", "Other markets"),
    ],
    "UA": [
        ("eu",    "–Ñ–≤—Ä–æ–ø–∞"),
        ("ca",    "–ö–∞–Ω–∞–¥–∞ / –û–∫–µ–∞–Ω—ñ—è"),
        ("latam", "–õ–∞—Ç–∏–Ω—Å—å–∫–∞ –ê–º–µ—Ä–∏–∫–∞"),
        ("other", "–Ü–Ω—à—ñ —Ä–∏–Ω–∫–∏"),
    ],
    "RU": [
        ("eu",    "–ï–≤—Ä–æ–ø–∞"),
        ("ca",    "–ö–∞–Ω–∞–¥–∞ / –û–∫–µ–∞–Ω–∏—è"),
        ("latam", "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞"),
        ("other", "–î—Ä—É–≥–∏–µ —Ä—ã–Ω–∫–∏"),
    ],
    "PT": [
        ("eu",    "Europa"),
        ("ca",    "Canad√° / Oceania"),
        ("latam", "Am√©rica Latina"),
        ("other", "Outros mercados"),
    ],
    "ES": [
        ("eu",    "Europa"),
        ("ca",    "Canad√° / Ocean√≠a"),
        ("latam", "Am√©rica Latina"),
        ("other", "Otros mercados"),
    ],
}

QUESTIONS = {
    "EN": {
        "title": "Please answer the following questions:",
        "items": [
            ("tgcontact", "Share your Telegram contact (@ nickname)"),
            ("email",     "Your email in our affiliate program"),
        ],
    },
    "UA": {
        "title": "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
        "items": [
            ("tgcontact", "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º Telegram-–∫–æ–Ω—Ç–∞–∫—Ç–æ–º (@ nickname)"),
            ("email",     "–í–∞—à email —É –Ω–∞—à—ñ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ"),
        ],
    },
    "RU": {
        "title": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:",
        "items": [
            ("tgcontact", "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º Telegram-–∫–æ–Ω—Ç–∞–∫—Ç–æ–º (@ nickname)"),
            ("email",     "–í–∞—à email –≤ –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"),
        ],
    },
    "PT": {
        "title": "Por favor, responda √†s seguintes perguntas:",
        "items": [
            ("tgcontact", "Compartilhe seu contato no Telegram (@ nickname)"),
            ("email",     "Seu email no nosso programa de afiliados"),
        ],
    },
    "ES": {
        "title": "Por favor, responde a las siguientes preguntas:",
        "items": [
            ("tgcontact", "Comparte tu contacto de Telegram (@ nickname)"),
            ("email",     "Tu correo electr√≥nico en nuestro programa de afiliados"),
        ],
    },
}

CONFIRM = {
    "EN": "‚úÖ Thank you for your answers! One of our managers will contact you "
          "shortly.\nIf there are any more questions, I'm always here to help.",
    "UA": "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.\n"
          "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á.",
    "RU": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
          "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.",
    "PT": "‚úÖ Obrigado pelas respostas! Um dos nossos gerentes entrar√° em "
          "contato em breve.\nQualquer d√∫vida, estou sempre por aqui.",
    "ES": "‚úÖ ¬°Gracias por tus respuestas! Uno de nuestros managers se pondr√° "
          "en contacto contigo en breve.\nSi tienes m√°s preguntas, estoy aqu√≠."
}

PR_INSTR = {
    "EN": "Please send your commercial offer here ‚Äì @YourUsername",
    "UA": "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Å—é–¥–∏ ‚Äì @YourUsername",
    "RU": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—é–¥–∞ ‚Äì @YourUsername",
    "PT": "Envie sua proposta comercial aqui ‚Äì @YourUsername",
    "ES": "Env√≠a tu propuesta comercial aqu√≠ ‚Äì @YourUsername",
}

PAY_INSTR = {
    "EN": "Please send your payment-solution proposal here ‚Äì @YourUsername",
    "UA": "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —â–æ–¥–æ –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å —Å—é–¥–∏ ‚Äì @YourUsername",
    "RU": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—ë–∂–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º —Å—é–¥–∞ ‚Äì @YourUsername",
    "PT": "Envie sua proposta de solu√ß√£o de pagamento aqui ‚Äì @YourUsername",
    "ES": "Env√≠a tu propuesta de soluciones de pago aqu√≠ ‚Äì @YourUsername",
}

HR_INSTR = {
    "EN": "Connect with our HR here ‚Äì @YourUsername",
    "UA": "–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º HR —Ç—É—Ç ‚Äì @YourUsername",
    "RU": "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º HR –∑–¥–µ—Å—å ‚Äì @YourUsername",
    "PT": "Fale com nosso RH aqui ‚Äì @YourUsername",
    "ES": "Contacta con nuestro HR aqu√≠ ‚Äì @YourUsername",
}

ADDITIONAL_Q_BUTTON = {
    "EN": "There are additional questions left",
    "UA": "–£ –º–µ–Ω–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "RU": "–£ –º–µ–Ω—è –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
    "PT": "Ainda tenho d√∫vidas",
    "ES": "A√∫n tengo preguntas",
}

MANAGER_WILL_CONTACT = {
    "EN": "‚úÖ Thanks! One of our managers will reach out shortly.",
    "UA": "‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.",
    "RU": "‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
    "PT": "‚úÖ Obrigado! Um dos nossos gerentes entrar√° em contato em breve.",
    "ES": "‚úÖ ¬°Gracias! Uno de nuestros managers se pondr√° en contacto contigo en breve.",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Questions / Answers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_language_kb():
    # helper to show language buttons for the start over function
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(lbl, callback_data=code)]
         for code, lbl in LANG_BUTTONS]
    )

async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Always restart the wizard, even after a bot reboot.
    query = update.callback_query
    await query.answer()

    context.user_data.clear()               

    #  Send a fresh language-picker message
    await query.message.reply_text(
        "Hello there! I'm Titan Partners Bot ü§ñ\n"
        "Before we dive into our chat, could you please let me know which "
        "language you prefer to use?",
        reply_markup=build_language_kb(),
    )

    return LANG

def add_start_over(btn_rows: list[list[InlineKeyboardButton]]):
    # Function to add Start Over button
    btn_rows.append([InlineKeyboardButton("üîÑ Start over", callback_data="start_over")])
    return btn_rows

def build_combined_prompt(lang: str) -> str:
    data = QUESTIONS[lang]
    lines = [data["title"], ""]                     # title + blank line
    for idx, (_key, question) in enumerate(data["items"], start=1):
        lines.append(f"{idx}. {question}")
    return "\n".join(lines)

# async function as it waits for the user response
async def start_wizard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton(text=label, callback_data=code)] 
        for code, label in LANG_BUTTONS # take labels from LANG_BUTTONS for each button
    ]

    await update.message.reply_text(
        "Hello there! I'm Titan Partners Bot ü§ñ\n"
        "Before we dive into our chat, could you please let me know which "
        "language you prefer to use?",
        reply_markup=InlineKeyboardMarkup(kb),  # shows the language buttons markup
    )
    return LANG    

async def choose_lang(update: Update, context):
    # Once the user picked a language and the first question is showed

    query = update.callback_query
    lang_code = query.data   # carries the chosen language
    await query.answer()    # sends an ack back to Telegram so the loading spinner on the user‚Äôs button stops

    context.user_data["lang"] = lang_code
    context.user_data["answers"] = {}


    buttons = add_start_over([
    [InlineKeyboardButton(text=label, callback_data=code)]
    for code, label in TOPIC_BUTTONS[lang_code]
    ])
    

    await query.message.reply_text( # the reply text
        GREETING[lang_code],
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return TOPIC



async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    topic_code = query.data
    await query.answer()

    lang = context.user_data["lang"]

    # 1. Streamer / Webmaster
    if topic_code in ("streamer", "webmaster"):
        context.user_data["role"] = topic_code

        buttons = add_start_over([
            [InlineKeyboardButton(t, callback_data=c)] for c, t in PAYMENT_BTNS
        ])

        await query.message.reply_text(
            PAYMENT_Q[lang],
            reply_markup=InlineKeyboardMarkup(buttons),
        )
        return MODEL

    # --- 2. PR / Marketing ----------------------------------------------
    if topic_code == "pr":
        btns = add_start_over([
            [InlineKeyboardButton(ADDITIONAL_Q_BUTTON[lang], callback_data="pr_extra")]
        ])
        await query.message.reply_text(PR_INSTR[lang], reply_markup=InlineKeyboardMarkup(btns))
        return PR_EXTRA

    # --- 3. Payment-solutions -------------------------------------------
    if topic_code == "payment":
        btns = add_start_over([
            [InlineKeyboardButton(ADDITIONAL_Q_BUTTON[lang], callback_data="pay_extra")]
        ])
        await query.message.reply_text(PAY_INSTR[lang], reply_markup=InlineKeyboardMarkup(btns))
        return PAY_EXTRA

    # --- 4. Vacancies -------------------------------------------
    if topic_code == "vacancies":
        await query.message.reply_text(
            HR_INSTR[lang],
            reply_markup=InlineKeyboardMarkup(add_start_over([]))
        )
        return FINISHED

    # --- 5. Other  -------------------------------------------------------
    prompt = build_combined_prompt(lang)
    await query.message.reply_text(prompt)
    return ASKING        


async def choose_payment_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    model = query.data
    await query.answer()

    context.user_data["answers"]["payment_model"] = model
    lang = context.user_data["lang"]
    context.user_data["answers"]["traffic_sources"] = []

    kb = build_traffic_kb([], lang)
    await query.message.reply_text(TRAFFIC_Q[lang], reply_markup=kb)
    return TRAFFIC

def build_traffic_kb(selected: list[str], lang: str, freeze: bool = False):
    rows = []
    for code, label in TRAFFIC_BTNS:
        prefix = "‚úÖ " if code in selected else ""
        rows.append([InlineKeyboardButton(prefix + label,
                                          callback_data="noop" if freeze else code)])
    if not freeze:                       # omit the Done row after finishing
        rows.append([InlineKeyboardButton("‚úÖ Done", callback_data=TRAFFIC_DONE[0])])
    add_start_over(rows)
    return InlineKeyboardMarkup(rows)

async def choose_traffic_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    code = query.data
    await query.answer()

    lang = context.user_data["lang"]
    selected = context.user_data["answers"]["traffic_sources"]

    # ‚îÄ‚îÄ user pressed DONE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if code == TRAFFIC_DONE[0]:
        # lock the old message: keep ticks, remove Done, disable taps
        await query.edit_message_reply_markup(
            reply_markup=build_traffic_kb(selected, lang, freeze=True)
        )

        # ask for markets in a *new* message
        kb_markets = add_start_over(
            [[InlineKeyboardButton(t, callback_data=c)] for c, t in MARKET_BTNS[lang]]
        )
        await query.message.reply_text(
            MARKET_Q[lang],
            reply_markup=InlineKeyboardMarkup(kb_markets),
        )
        return MARKET

    # ‚îÄ‚îÄ toggle selection ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if code in selected:
        selected.remove(code)
    else:
        selected.append(code)

    # redraw same message with updated ticks
    await query.edit_message_reply_markup(
        reply_markup=build_traffic_kb(selected, lang)
    )
    return TRAFFIC


async def choose_market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    market_code = query.data
    await query.answer()

    lang = context.user_data["lang"]
    context.user_data["answers"]["market"] = market_code

    # ‚îÄ‚îÄ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    prompt = build_combined_prompt(lang)
    await query.message.reply_text(
        prompt,
        reply_markup=InlineKeyboardMarkup(add_start_over([])),
    )
    return ASKING

async def handle_questions_left_pr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = context.user_data.get("lang", "EN")
    mgr_user, mgr_chat = pick_manager({})

    await context.bot.send_message(
        chat_id=mgr_chat,
        text=(
            f"‚ö° PR/Marketing lead #{update.effective_user.id} "
            f"(@{update.effective_user.username or 'no_username'}) [{lang}]\n"
            "They clicked ‚Äòadditional questions‚Äô after the PR offer prompt."
        )
    )

    await query.message.reply_text(
        MANAGER_WILL_CONTACT.get(lang, MANAGER_WILL_CONTACT["EN"]),
        reply_markup=InlineKeyboardMarkup(add_start_over([])),
    )
    return FINISHED


async def handle_questions_left_payment_solutions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = context.user_data.get("lang", "EN")
    mgr_user, mgr_chat = pick_manager({})

    await context.bot.send_message(
        mgr_chat,
        text=(
            f"‚ö° Payment-solutions lead #{update.effective_user.id} "
            f"(@{update.effective_user.username or 'no_username'}) [{lang}]\n"
            "They clicked ‚Äòadditional questions‚Äô after the payment offer prompt."
        )
    )

    await query.message.reply_text(
        MANAGER_WILL_CONTACT.get(lang, MANAGER_WILL_CONTACT["EN"]),
        reply_markup=InlineKeyboardMarkup(add_start_over([])),
    )
    return FINISHED




# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ QUESTION LOOP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def collect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang     = context.user_data["lang"]
    answers  = context.user_data.setdefault("answers", {})
    role     = context.user_data.get("role")                 # streamer / webmaster / None
    answers["raw_reply"] = update.message.text               # save the whole reply

    # ---------- Confirmation to user ----------
    await update.message.reply_text(
        CONFIRM.get(lang, CONFIRM["EN"]),
        reply_markup=InlineKeyboardMarkup(add_start_over([])),  # with Start Over button
    )

    # ---------- Manager alert ----------
    mgr_user, mgr_chat = pick_manager({"role": role})

    # build optional tags
    lines = [
        f"‚ö° New affiliate #{update.effective_user.id} "
        f"(@{update.effective_user.username or 'no_username'}) [{lang}]"
    ]

    if role == "streamer":
        lines.append("ROLE: Streamer")
    elif role == "webmaster":
        lines.append("ROLE: Webmaster")

    if "payment_model" in answers:
        lines.append(f"Payment model: {PAY_LABEL.get(answers['payment_model'], answers['payment_model'])}")

    if "traffic_sources" in answers:
        lines.append("Traffic: " + ", ".join(answers["traffic_sources"]))

    if "market" in answers:
        lines.append(f"Market: {MARKET_BTNS.get(answers['market'], answers['market'])}")

    if "deal_type" in answers:
        lines.append(f"Deal type: {answers['deal_type'].capitalize()}")

    lines.append("Combined answers:")
    lines.append(update.message.text)

    await context.bot.send_message(mgr_chat, text="\n".join(lines))
    return FINISHED

# -- helpers ---------------------------------------------------------------
async def _show_language_picker(query):
    kb = [[InlineKeyboardButton(lbl, callback_data=code)] for code, lbl in LANG_BUTTONS]
    await query.message.edit_text(
        "Hello there! I'm Titan Partners Bot ü§ñ\n"
        "Before we dive into our chat, could you please let me know which "
        "language you prefer to use?",
        reply_markup=InlineKeyboardMarkup(kb),
    )
    return LANG

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONVERSATION HANDLER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
START_OVER_HANDLER = CallbackQueryHandler(start_over, pattern="^start_over$")
FINISHED = 9  # any unused state id

def build_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_wizard)], # whenever the user sends /start, the wizard starts (or restarts) and start_wizard runs
        states={ # Each constant (LANG, TOPIC, ‚Ä¶) is an int (0, 1, 2, ‚Ä¶)
            LANG:   [CallbackQueryHandler(choose_lang)], # LANG ‚àí waits for a button -> choose_lang
            TOPIC:  [START_OVER_HANDLER, CallbackQueryHandler(choose_topic)], # TOPIC ‚àí waits for a button -> choose_topic
            MODEL:  [START_OVER_HANDLER, CallbackQueryHandler(choose_payment_model)], # MODEL ‚àí waits for a button -> choose_payment_model
            TRAFFIC:[START_OVER_HANDLER, CallbackQueryHandler(choose_traffic_source)],
            MARKET: [START_OVER_HANDLER, CallbackQueryHandler(choose_market)], # MARKET ‚àí waits for a button -> choose_market
            PR_EXTRA: [START_OVER_HANDLER, CallbackQueryHandler(handle_questions_left_pr)], # questions left button -> routed to the manager
            PAY_EXTRA: [START_OVER_HANDLER, CallbackQueryHandler(handle_questions_left_payment_solutions)], # questions left button -> routed to the manag
            ASKING: [START_OVER_HANDLER, MessageHandler(filters.TEXT & ~filters.COMMAND, collect)], # ASKING ‚àí waits for free-text -> collect
            FINISHED: [START_OVER_HANDLER],
        },
        fallbacks=[], # Empty list ‚Äì we didn‚Äôt add a cancel flow
        allow_reentry=True, # True, so typing /start mid-flow restarts from the top instead of being ignored
    )







